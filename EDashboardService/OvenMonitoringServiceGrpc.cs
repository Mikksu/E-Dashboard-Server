// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EDashboardService/Protos/OvenMonitoringService.proto
// </auto-generated>
// Original file comments:
// Copyright 2017, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace EDashboardService.OvenMonitoring.V1 {
  public static partial class OvenMonitoringService
  {
    static readonly string __ServiceName = "EDashboardService.OvenMonitoring.v1.OvenMonitoringService";

    static readonly grpc::Marshaller<global::EDashboardService.OvenMonitoring.V1.RegisterRequest> __Marshaller_EDashboardService_OvenMonitoring_v1_RegisterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EDashboardService.OvenMonitoring.V1.RegisterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> __Marshaller_EDashboardService_OvenMonitoring_v1_EmptyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EDashboardService.OvenMonitoring.V1.EmptyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest> __Marshaller_EDashboardService_OvenMonitoring_v1_ReportRealtimeTemperatureRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EDashboardService.OvenMonitoring.V1.FeedRequest> __Marshaller_EDashboardService_OvenMonitoring_v1_FeedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EDashboardService.OvenMonitoring.V1.FeedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EDashboardService.OvenMonitoring.V1.FetchRequest> __Marshaller_EDashboardService_OvenMonitoring_v1_FetchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EDashboardService.OvenMonitoring.V1.FetchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest> __Marshaller_EDashboardService_OvenMonitoring_v1_CheckOverlyRoastedLotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse> __Marshaller_EDashboardService_OvenMonitoring_v1_CheckOverlyRoastedLotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::EDashboardService.OvenMonitoring.V1.RegisterRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse> __Method_Register = new grpc::Method<global::EDashboardService.OvenMonitoring.V1.RegisterRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_EDashboardService_OvenMonitoring_v1_RegisterRequest,
        __Marshaller_EDashboardService_OvenMonitoring_v1_EmptyResponse);

    static readonly grpc::Method<global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse> __Method_ReportRealtimeTemperature = new grpc::Method<global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportRealtimeTemperature",
        __Marshaller_EDashboardService_OvenMonitoring_v1_ReportRealtimeTemperatureRequest,
        __Marshaller_EDashboardService_OvenMonitoring_v1_EmptyResponse);

    static readonly grpc::Method<global::EDashboardService.OvenMonitoring.V1.FeedRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse> __Method_Feed = new grpc::Method<global::EDashboardService.OvenMonitoring.V1.FeedRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Feed",
        __Marshaller_EDashboardService_OvenMonitoring_v1_FeedRequest,
        __Marshaller_EDashboardService_OvenMonitoring_v1_EmptyResponse);

    static readonly grpc::Method<global::EDashboardService.OvenMonitoring.V1.FetchRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse> __Method_Fetch = new grpc::Method<global::EDashboardService.OvenMonitoring.V1.FetchRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Fetch",
        __Marshaller_EDashboardService_OvenMonitoring_v1_FetchRequest,
        __Marshaller_EDashboardService_OvenMonitoring_v1_EmptyResponse);

    static readonly grpc::Method<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest, global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse> __Method_CheckOverlyRoastedLot = new grpc::Method<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest, global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckOverlyRoastedLot",
        __Marshaller_EDashboardService_OvenMonitoring_v1_CheckOverlyRoastedLotRequest,
        __Marshaller_EDashboardService_OvenMonitoring_v1_CheckOverlyRoastedLotResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EDashboardService.OvenMonitoring.V1.OvenMonitoringServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OvenMonitoringService</summary>
    [grpc::BindServiceMethod(typeof(OvenMonitoringService), "BindService")]
    public abstract partial class OvenMonitoringServiceBase
    {
      /// <summary>
      /// Register the oven once the client opened.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> Register(global::EDashboardService.OvenMonitoring.V1.RegisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send real-time temperature to the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> ReportRealtimeTemperature(global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Put the product in to the oven.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> Feed(global::EDashboardService.OvenMonitoring.V1.FeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove the product from the oven.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> Fetch(global::EDashboardService.OvenMonitoring.V1.FetchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check are there overly roasted lot in the specified oven.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse> CheckOverlyRoastedLot(global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OvenMonitoringService</summary>
    public partial class OvenMonitoringServiceClient : grpc::ClientBase<OvenMonitoringServiceClient>
    {
      /// <summary>Creates a new client for OvenMonitoringService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OvenMonitoringServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OvenMonitoringService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OvenMonitoringServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OvenMonitoringServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OvenMonitoringServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Register the oven once the client opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse Register(global::EDashboardService.OvenMonitoring.V1.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register the oven once the client opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse Register(global::EDashboardService.OvenMonitoring.V1.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      /// Register the oven once the client opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> RegisterAsync(global::EDashboardService.OvenMonitoring.V1.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register the oven once the client opened.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> RegisterAsync(global::EDashboardService.OvenMonitoring.V1.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      /// Send real-time temperature to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse ReportRealtimeTemperature(global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportRealtimeTemperature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send real-time temperature to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse ReportRealtimeTemperature(global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportRealtimeTemperature, null, options, request);
      }
      /// <summary>
      /// Send real-time temperature to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> ReportRealtimeTemperatureAsync(global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportRealtimeTemperatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send real-time temperature to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> ReportRealtimeTemperatureAsync(global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportRealtimeTemperature, null, options, request);
      }
      /// <summary>
      /// Put the product in to the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse Feed(global::EDashboardService.OvenMonitoring.V1.FeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Feed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put the product in to the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse Feed(global::EDashboardService.OvenMonitoring.V1.FeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Feed, null, options, request);
      }
      /// <summary>
      /// Put the product in to the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> FeedAsync(global::EDashboardService.OvenMonitoring.V1.FeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put the product in to the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> FeedAsync(global::EDashboardService.OvenMonitoring.V1.FeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Feed, null, options, request);
      }
      /// <summary>
      /// Remove the product from the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse Fetch(global::EDashboardService.OvenMonitoring.V1.FetchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Fetch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove the product from the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.EmptyResponse Fetch(global::EDashboardService.OvenMonitoring.V1.FetchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Fetch, null, options, request);
      }
      /// <summary>
      /// Remove the product from the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> FetchAsync(global::EDashboardService.OvenMonitoring.V1.FetchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove the product from the oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.EmptyResponse> FetchAsync(global::EDashboardService.OvenMonitoring.V1.FetchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Fetch, null, options, request);
      }
      /// <summary>
      /// Check are there overly roasted lot in the specified oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse CheckOverlyRoastedLot(global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckOverlyRoastedLot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check are there overly roasted lot in the specified oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse CheckOverlyRoastedLot(global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckOverlyRoastedLot, null, options, request);
      }
      /// <summary>
      /// Check are there overly roasted lot in the specified oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse> CheckOverlyRoastedLotAsync(global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckOverlyRoastedLotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check are there overly roasted lot in the specified oven.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse> CheckOverlyRoastedLotAsync(global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckOverlyRoastedLot, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OvenMonitoringServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OvenMonitoringServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(OvenMonitoringServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_ReportRealtimeTemperature, serviceImpl.ReportRealtimeTemperature)
          .AddMethod(__Method_Feed, serviceImpl.Feed)
          .AddMethod(__Method_Fetch, serviceImpl.Fetch)
          .AddMethod(__Method_CheckOverlyRoastedLot, serviceImpl.CheckOverlyRoastedLot).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OvenMonitoringServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EDashboardService.OvenMonitoring.V1.RegisterRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_ReportRealtimeTemperature, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EDashboardService.OvenMonitoring.V1.ReportRealtimeTemperatureRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(serviceImpl.ReportRealtimeTemperature));
      serviceBinder.AddMethod(__Method_Feed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EDashboardService.OvenMonitoring.V1.FeedRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(serviceImpl.Feed));
      serviceBinder.AddMethod(__Method_Fetch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EDashboardService.OvenMonitoring.V1.FetchRequest, global::EDashboardService.OvenMonitoring.V1.EmptyResponse>(serviceImpl.Fetch));
      serviceBinder.AddMethod(__Method_CheckOverlyRoastedLot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotRequest, global::EDashboardService.OvenMonitoring.V1.CheckOverlyRoastedLotResponse>(serviceImpl.CheckOverlyRoastedLot));
    }

  }
}
#endregion
