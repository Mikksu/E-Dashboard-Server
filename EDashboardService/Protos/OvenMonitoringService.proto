// Copyright 2017, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package EDashboardService.OvenMonitoring.v1;

service OvenMonitoringService {
    
    // Register the oven once the client opened.
    rpc Register(RegisterRequest) returns (EmptyResponse);

    // Send real-time temperature to the server.
    rpc ReportRealtimeTemperature(ReportRealtimeTemperatureRequest) returns (EmptyResponse);

    // Put the product in to the oven.
    rpc Feed(FeedRequest) returns (EmptyResponse);

    // Remove the product from the oven.
    rpc Fetch(FetchRequest) returns (EmptyResponse);

    // Check are there overly roasted lot in the specified oven.
    rpc CheckOverlyRoastedLot(CheckOverlyRoastedLotRequest) returns (CheckOverlyRoastedLotResponse);
}

message EmptyRequest{

}

message EmptyResponse{

}

message RegisterRequest {
    string OvenHash = 1;
    string caption = 2;
}

message ReportRealtimeTemperatureRequest{
    string OvenHash = 1;
    float Temperature = 2;
}

message FeedRequest{
    string OvenHash = 1;
    string LotNum = 2;
    int32 Pcs = 3;
    int32 RoastSec = 4;
    string OpName = 5;
}

message FetchRequest{
    string OvenHash = 1;
    string LotNum = 2;
}

message CheckOverlyRoastedLotRequest
{
    string OvenHash = 1;
}

message CheckOverlyRoastedLotResponse
{
    bool HasOne = 1;
}

